import{precacheAndRoute,cleanupOutdatedCaches}from"workbox-precaching";import{registerRoute,setDefaultHandler,setCatchHandler}from"workbox-routing";import{StaleWhileRevalidate,CacheFirst,NetworkFirst,NetworkOnly}from"workbox-strategies";import{ExpirationPlugin}from"workbox-expiration";async function handleBackgroundSync(){console.log("SW: Performing background sync");try{const e=await getStoredRequests();for(const t of e)try{await fetch(t.url,t.options),await removeStoredRequest(t.id),console.log("SW: Successfully synced request",t.url)}catch(e){console.log("SW: Failed to sync request",t.url,e)}}catch(e){console.error("SW: Background sync failed",e)}}async function getStoredRequests(){try{const e=await caches.open("background-sync-v1");return(await e.keys()).map((e=>({id:e.url,url:e.url,options:e})))}catch(e){return console.error("SW: Error getting stored requests",e),[]}}async function removeStoredRequest(e){try{const t=await caches.open("background-sync-v1");await t.delete(e)}catch(e){console.error("SW: Error removing stored request",e)}}async function updateCache(e){try{const t=await caches.open("runtime-cache-v1");await t.put(e.url,new Response(JSON.stringify(e.data))),console.log("SW: Cache updated for",e.url)}catch(e){console.error("SW: Error updating cache",e)}}precacheAndRoute(self.__WB_MANIFEST||[]),cleanupOutdatedCaches(),registerRoute((({request:e})=>"script"===e.destination||"style"===e.destination||"image"===e.destination),new CacheFirst({cacheName:"static-assets-v2",plugins:[new ExpirationPlugin({maxEntries:100,maxAgeSeconds:2592e3,purgeOnQuotaError:!0})]})),registerRoute((({url:e})=>e.pathname.includes("/stories")),new NetworkFirst({cacheName:"api-cache-v2",plugins:[new ExpirationPlugin({maxEntries:50,maxAgeSeconds:300,purgeOnQuotaError:!0})],networkTimeoutSeconds:3})),registerRoute((({url:e})=>"https://unpkg.com"===e.origin||"https://cdnjs.cloudflare.com"===e.origin),new StaleWhileRevalidate({cacheName:"cdn-cache-v2",plugins:[new ExpirationPlugin({maxEntries:30,maxAgeSeconds:604800})]})),registerRoute((({request:e})=>"navigate"===e.mode),new NetworkFirst({cacheName:"pages-cache-v2",plugins:[new ExpirationPlugin({maxEntries:10,maxAgeSeconds:86400})]})),registerRoute((({request:e})=>"font"===e.destination),new CacheFirst({cacheName:"fonts-cache-v2",plugins:[new ExpirationPlugin({maxEntries:20,maxAgeSeconds:31536e3})]})),setDefaultHandler(new StaleWhileRevalidate),setCatchHandler((async({event:e})=>"document"===e.request.destination&&caches.match("/")||Response.error())),self.addEventListener("sync",(e=>{console.log("SW: Background sync triggered",e.tag),"background-sync"===e.tag&&e.waitUntil(handleBackgroundSync())})),self.addEventListener("push",(e=>{console.log("SW: Push notification received",e);let t={title:"Katalog Film Indonesia",body:"Ada update baru di aplikasi!",icon:"/images/logo.png",badge:"/images/logo.png",tag:"katalog-film-notification",data:{url:"/"},requireInteraction:!0,actions:[{action:"open",title:"Buka Aplikasi",icon:"/images/logo.png"},{action:"close",title:"Tutup"}]};if(e.data)try{const n=e.data.json();t={...t,...n}}catch(e){console.error("SW: Error parsing push data:",e)}e.waitUntil(self.registration.showNotification(t.title,{body:t.body,icon:t.icon,badge:t.badge,tag:t.tag,data:t.data,requireInteraction:t.requireInteraction,actions:t.actions,vibrate:[200,100,200],timestamp:Date.now()}))})),self.addEventListener("notificationclick",(e=>{console.log("SW: Notification clicked",e),e.notification.close();const t=e.notification.data?.url||"/";"open"!==e.action&&e.action||e.waitUntil(clients.matchAll({type:"window",includeUncontrolled:!0}).then((e=>{for(const t of e)if(t.url.includes(self.location.origin)&&"focus"in t)return t.focus();if(clients.openWindow)return clients.openWindow(t)})))})),self.addEventListener("notificationclose",(e=>{console.log("SW: Notification closed",e)})),self.addEventListener("install",(e=>{console.log("SW: Service worker installing..."),self.skipWaiting()})),self.addEventListener("activate",(e=>{console.log("SW: Service worker activating..."),e.waitUntil(self.clients.claim())})),self.addEventListener("message",(e=>{e.data&&"SKIP_WAITING"===e.data.type&&self.skipWaiting(),e.data&&"CACHE_UPDATE"===e.data.type&&e.waitUntil(updateCache(e.data.payload))})),console.log("SW: Workbox Service Worker loaded successfully! ðŸš€");